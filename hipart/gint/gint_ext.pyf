! HiPart is a program to analyze the electronic structure of molecules with
! fuzzy-atom partitioning methods.
! Copyright (C) 2007 - 2012 Toon Verstraelen <Toon.Verstraelen@UGent.be>
!
! This file is part of HiPart.
!
! HiPart is free software; you can redistribute it and/or
! modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation; either version 3
! of the License, or (at your option) any later version.
!
! HiPart is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program; if not, see <http://www.gnu.org/licenses/>
!
!--

python module gint_ext
interface

include 'gint1_fn_auto.pyf.inc'

  integer function gint1_fns_basis(weights, orbs, points, centers, shell_types, shell_map, num_primitives, ccoeffs, exponents, num_orbs, num_dof, num_points, num_centers, num_shells, num_ccoeffs, num_exponents)
    intent(c) gint1_fns_basis
    intent(c)
    double precision intent(in) :: weights(num_orbs, num_dof)
    double precision intent(inout) :: orbs(num_orbs, num_points)
    double precision intent(in) :: points(num_points,3)
    double precision intent(in)  :: centers(num_centers,3)
    integer intent(int) :: shell_types(num_shells)
    integer intent(int) :: shell_map(num_shells)
    integer intent(int) :: num_primitives(num_shells)
    double precision intent(in) :: ccoeffs(num_ccoeffs)
    double precision intent(in) :: exponents(num_exponents)
    integer intent(hide), depend(weights) :: num_orbs=shape(weights, 0)
    integer intent(hide), depend(weights) :: num_dof=shape(weights, 1)
    integer intent(hide), depend(points) :: num_points=shape(points, 0)
    integer intent(hide), depend(centers) :: num_centers=len(centers)
    integer intent(hide), depend(shell_types) :: num_shells=len(shell_types)
    integer intent(hide), depend(ccoeffs) :: num_ccoeffs=len(ccoeffs)
    integer intent(hide), depend(exponents) :: num_exponents=len(exponents)
  end function gint1_fns_basis

  integer function gint1_fn_dmat(dmat, density, points, centers, shell_types, shell_map, num_primitives, ccoeffs, exponents, num_dmat, num_points, num_centers, num_shells, num_ccoeffs, num_exponents)
    intent(c) gint1_fn_dmat
    intent(c)
    double precision intent(in) :: dmat(num_dmat)
    double precision intent(inout) :: density(num_points)
    double precision intent(in) :: points(num_points,3)
    double precision intent(in)  :: centers(num_centers,3)
    integer intent(int) :: shell_types(num_shells)
    integer intent(int) :: shell_map(num_shells)
    integer intent(int) :: num_primitives(num_shells)
    double precision intent(in) :: ccoeffs(num_ccoeffs)
    double precision intent(in) :: exponents(num_exponents)
    integer intent(hide), depend(dmat) :: num_dmat=len(dmat)
    integer intent(hide), depend(points) :: num_points=len(points)
    integer intent(hide), depend(centers) :: num_centers=len(centers)
    integer intent(hide), depend(shell_types) :: num_shells=len(shell_types)
    integer intent(hide), depend(ccoeffs) :: num_ccoeffs=len(ccoeffs)
    integer intent(hide), depend(exponents) :: num_exponents=len(exponents)
  end function gint1_fn_dmat

  integer function gint1_fn_overlap(overlap, points, weights, centers, shell_types, shell_map, num_primitives, ccoeffs, exponents, num_overlap, num_points, num_centers, num_shells, num_ccoeffs, num_exponents)
    intent(c) gint1_fn_overlap
    intent(c)
    double precision intent(inout) :: overlap(num_overlap)
    double precision intent(in) :: points(num_points,3)
    double precision intent(in) :: weights(num_points)
    double precision intent(in)  :: centers(num_centers,3)
    integer intent(int) :: shell_types(num_shells)
    integer intent(int) :: shell_map(num_shells)
    integer intent(int) :: num_primitives(num_shells)
    double precision intent(in) :: ccoeffs(num_ccoeffs)
    double precision intent(in) :: exponents(num_exponents)
    integer intent(hide), depend(overlap) :: num_overlap=len(overlap)
    integer intent(hide), depend(points) :: num_points=len(points)
    integer intent(hide), depend(centers) :: num_centers=len(centers)
    integer intent(hide), depend(shell_types) :: num_shells=len(shell_types)
    integer intent(hide), depend(ccoeffs) :: num_ccoeffs=len(ccoeffs)
    integer intent(hide), depend(exponents) :: num_exponents=len(exponents)
  end function gint1_fn_overlap

include 'gint2_nai_auto.pyf.inc'

  integer function gint2_nai_dmat(dmat, potentials, points, centers, shell_types, shell_map, num_primitives, ccoeffs, exponents, num_dmat, num_points, num_centers, num_shells, num_ccoeffs, num_exponents)
    intent(c) gint2_nai_dmat
    intent(c)
    double precision intent(in) :: dmat(num_dmat)
    double precision intent(inout) :: potentials(num_points)
    double precision intent(in) :: points(num_points,3)
    double precision intent(in)  :: centers(num_centers,3)
    integer intent(int) :: shell_types(num_shells)
    integer intent(int) :: shell_map(num_shells)
    integer intent(int) :: num_primitives(num_shells)
    double precision intent(in) :: ccoeffs(num_ccoeffs)
    double precision intent(in) :: exponents(num_exponents)
    integer intent(hide), depend(dmat) :: num_dmat=len(dmat)
    integer intent(hide), depend(points) :: num_points=len(points)
    integer intent(hide), depend(centers) :: num_centers=len(centers)
    integer intent(hide), depend(shell_types) :: num_shells=len(shell_types)
    integer intent(hide), depend(ccoeffs) :: num_ccoeffs=len(ccoeffs)
    integer intent(hide), depend(exponents) :: num_exponents=len(exponents)
  end function gint2_nai_dmat

! auxiliary stuff

  double precision function gaux(T, n)
    intent(c) gaux
    intent(c)
    double precision intent(in) :: T
    integer intent(int) :: n
  end function gaux

  integer function reorder_dmat_c(dmat, permutation, num_dof)
    intent(c) reorder_dmat_c
    intent(c)
    double precision intent(inout) :: dmat((num_dof*(num_dof+1))/2)
    integer intent(int) :: permutation(num_dof)
    integer intent(hide), depend(permutation) :: num_dof=len(permutation)
  end function reorder_dmat_c

  subroutine add_orbitals_to_dmat(orbitals, dmat, num_orbitals, num_dof)
    intent(c) add_orbitals_to_dmat
    intent(c)
    double precision intent(in) :: orbitals(num_orbitals,num_dof)
    double precision intent(inout) :: dmat((num_dof*(num_dof+1))/2)
    integer intent(hide), depend(orbitals) :: num_orbitals=shape(orbitals,0)
    integer intent(hide), depend(orbitals) :: num_dof=shape(orbitals,1)
  end subroutine add_orbitals_to_dmat

  subroutine dmat_to_full(dmat, full, num_dof)
    intent(c) dmat_to_full
    intent(c)
    double precision intent(in) :: dmat((num_dof*(num_dof+1))/2)
    double precision intent(inout) :: full(num_dof,num_dof)
    integer intent(hide), depend(full) :: num_dof=shape(full,1)
  end subroutine dmat_to_full

end interface
end python module gint_ext
