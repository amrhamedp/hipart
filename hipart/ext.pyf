! HiPart is a software toolkit to analyse molecular densities with the hirshfeld partitioning scheme.
! Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>
!
! This file is part of HiPart.
!
! HiPart is free software; you can redistribute it and/or
! modify it under the terms of the GNU General Public License
! as published by the Free Software Foundation; either version 3
! of the License, or (at your option) any later version.
!
! HiPart is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program; if not, see <http://www.gnu.org/licenses/>
!
! --


python module ext
interface

!
! utils.c
!

  subroutine grid_distances(center,points,distances,n)
    intent(c) grid_distances
    intent(c)

    double precision intent(in) :: center(3)
    double precision intent(in) :: points(n,3)
    double precision intent(inout) :: distances(n)
    integer intent(hide), depend(distances) :: n=len(distances)
  end subroutine grid_distances

!
! cubic_spline.c
!

  subroutine spline_construct(x,y,d,n)
    intent(c) spline_construct
    intent(c)

    integer intent(hide), depend(x) :: n=len(x)
    double precision intent(in) :: x(n)
    double precision intent(in) :: y(n)
    double precision intent(inout) :: d(n)
  end subroutine spline_construct

  subroutine spline_eval(x,y,d,n,x_new,y_new,n_new)
    intent(c) spline_eval
    intent(c)

    integer intent(hide), depend(x) :: n=len(x)
    double precision intent(in) :: x(n)
    double precision intent(in) :: y(n)
    double precision intent(in) :: d(n)

    integer intent(hide), depend(x_new) :: n_new=len(x_new)
    double precision intent(in) :: x_new(n_new)
    double precision intent(inout) :: y_new(n_new)
  end subroutine spline_eval

  double precision function spline_int(x,y,d,n)
    intent(c) spline_int
    intent(c)

    integer intent(hide), depend(x) :: n=len(x)
    double precision intent(in) :: x(n)
    double precision intent(in) :: y(n)
    double precision intent(in) :: d(n)
  end function spline_int

  subroutine spline_cumul_int(x,y,d,yint,n)
    intent(c) spline_cumul_int
    intent(c)

    integer intent(hide), depend(x) :: n=len(x)
    double precision intent(in) :: x(n)
    double precision intent(in) :: y(n)
    double precision intent(in) :: d(n)
    double precision intent(inout) :: yint(n)
  end subroutine spline_cumul_int

end interface
end python module ext
